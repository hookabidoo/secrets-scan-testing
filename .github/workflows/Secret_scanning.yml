name: Secret_scanning
on: workflow_dispatch
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v2

      - name: Create temporary directory
        run: echo "WORKFLOWDIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Create environmental variables 
        run: |
          echo "ARTIFACT_PATH=${WORKFLOWDIR}/current-results.json" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=FMGL-SS-${GITHUB_RUN_ID}-${GITHUB_SHA}" >> $GITHUB_ENV
          echo "ANALYSE_FILE=${WORKFLOWDIR}/analyse_current_results.txt" >> $GITHUB_ENV
          echo "SUM_FILE=${WORKFLOWDIR}/scan_summary.txt" >> $GITHUB_ENV
          echo "PREV_ARTIFACTS=${WORKFLOWDIR}/prev-artifacts.json" >> $GITHUB_ENV
          echo "GITLEAKS_ARTIFACTS=${WORKFLOWDIR}/secret-af.json" >> $GITHUB_ENV
          echo "LAST_ARTIFACT_ZIP=${WORKFLOWDIR}/last-scans-output.zip" >> $GITHUB_ENV
      
      - name: Check if gitleaks is installed
        run: |
          if ! command -v gitleaks &> /dev/null; then
            echo "gitleaks is not installed, installing..."
            curl -so gitleaks.tar.gz  $(curl -sL https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep "browser_download_url.*linux_x64.tar.gz" | cut -d '"' -f 4)
            tar -C /usr/local/bin -x -v -f gitleaks.tar.gz gitleaks
          else
            echo "gitleaks is already installed"
          fi

      - name: Run Local Gitleaks Binary
        run: |
          # Ensure the binary 'gitleaks' is in the PATH. Then run Gitleak to detect secrets in source code
          bash -s << 'EOF'
          gitleaks detect --no-git -r $ARTIFACT_PATH
          ls -alh $ARTIFACT_PATH
          echo "leaks=$(jq length $ARTIFACT_PATH)" >> $GITHUB_ENV
          EOF
        continue-on-error: true

      - name: If leaks found 
        if: ${{ env.leaks != 0 }}
        run: |
          jq_filter='.[] | "- The \(.RuleID) rule has detected a plain-text \(.Match | split("=")[0] | split("\":")[0]) from \(.StartLine) line to in the \(.File) file."'
          jq -r "$jq_filter" "$ARTIFACT_PATH" > $ANALYSE_FILE 
          cat $ANALYSE_FILE 
          leaks_uniq_line=$(uniq "$ANALYSE_FILE" | wc -l)
          echo "\nRecommendations:\n- Please review and remove the respective secrets from the source code.\n " >> $ANALYSE_FILE 
          echo "- Repository: ${{ github.repository }}\n- Scan Status: Completed\n- Completion Time: $(date)" >> $SUM_FILE
          echo "- Number of plain-text secrets found: $leaks_uniq_line " >> $SUM_FILE
          cat $SUM_FILE
        continue-on-error: true
      
      - name: Compare Current vs Previous Results
        if: ${{ env.leaks != 0 }}
        run: |
          bash -s << 'EOF'

          # retrieve all artifacts from all GitHub Actions workflows
          curl -L -o $PREV_ARTIFACTS \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts
          
          #extracting all artifacts from secret scanning workflows. Then find the most recent artifact
          jq '[ .artifacts[] | select(.name | startswith("FMGL-SS"))]' $PREV_ARTIFACTS > $GITLEAKS_ARTIFACTS
          echo "list of all GL artifacts"
          cat $GITLEAKS_ARTIFACTS
          LAST_A=$(jq '.[].created_at' $GITLEAKS_ARTIFACTS | sort -rV | head -n 1)
          if [ -z $LAST_A ] ; then exit 0 ; fi

          # if recent artifact is found, obtaining the Download URL for the most Recent Artifact
          echo "Most recent scan with artifact is $LAST_A"
          A_URL=$(jq '.artifacts[] | select(.created_at == '${LAST_A}') | .archive_download_url' $PREV_ARTIFACTS | tr -d '"')
          if [ -z $A_URL ] ; then exit 0 ; fi
          echo "fetching previous scan results:" $LAST_A $A_URL
          curl -L -o $LAST_ARTIFACT_ZIP \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" $A_URL
          
          # if the ZIP file exists, extracts the contents of the ZIP file into that temp directory
          if [ -e "$LAST_ARTIFACT_ZIP" ]; then
            PREV_FILENAME=${WORKFLOWDIR}/previous_result.json
            unzip -p $LAST_ARTIFACT_ZIP > $PREV_FILENAME
            ls -lah $PREV_FILENAME

            # format findings from previous result ($PREV_FILENAME) and current result ($ARTIFACT_PATH). These findings are sorted and unique results are saved.
            format_findings(){ jq --compact-output '.[] | [.File , .Secret]' "$1"; }           
            format_findings $PREV_FILENAME | sort | uniq > $WORKFLOWDIR/results-prev
            format_findings $ARTIFACT_PATH | sort | uniq > $WORKFLOWDIR/results-current
  
            # compare the results from the previous run with the current run
            diff_results=$(diff -u "$WORKFLOWDIR/results-prev" "$WORKFLOWDIR/results-current")
            new_secrets=$(echo "$diff_results" | grep '^+\[' | wc -l)
            echo "- Number of new secrets detected in this scan: $new_secrets" >> $SUM_FILE
          else
            echo "This repository has not been scanned previosly."     
          fi
          EOF
        continue-on-error: true 

      - name: Email the result 
        if: ${{ env.leaks != 0 }}
        run: | 
          bash -s << 'EOF'
          EMAIL_BODY="Hello,\n\nThis email is to inform about the results of the recent scan.
          \nScan Summary:\n$(cat $SUM_FILE)
          \nScan Details:\n$(cat $ANALYSE_FILE)\n 
          If you have any questions or need further assistance, please don't hesitate to reach out.\nThanks"
          EMAIL_BODY=$(printf "$EMAIL_BODY")

          #send email to pull request owner
          OWNER_EMAIL=$(git log --pretty=format:"%ae" | head -1)
          echo "The owner's email associated with the pull request is: $OWNER_EMAIL"
          
          OWN=$(git log -n 1 --pretty=format:%ae remotes/origin/${{ github.head_ref }})
          echo $OWN

          #aws ses send-email \
          #--from 'application.security@fortescue.com' \
          #--destination "ToAddresses=['$OWNER_EMAIL']" \
          #--message "Subject={Data='Secret Scanning Results'},Body={Text={Data=\"$EMAIL_BODY\"}}" \
          #--profile 871866954555.developer-871866954555  
          
          #send email to AppSec inbox 
          #aws ses send-email \
          #--from 'application.security@fortescue.com' \
          #--destination "ToAddresses=['application.security@fortescue.com']" \
          #--message "Subject={Data='Secret Scanning Results'},Body={Text={Data=\"$EMAIL_BODY\"}}" \
          #--profile 871866954555.developer-871866954555  

          #if store emails in GitHub 
          for text in "${{ vars.EMAILS }}"; do
            if [[ "$text" != *@fortescue.com* ]]; then
              echo "Please add list of recipient email in GitHub."
            else
              echo "${{ vars.EMAILS }}" | while IFS= read -r line; do
              aws ses send-email \
              --from 'application.security@fortescue.com' \
              --destination "ToAddresses=['$line']" \
              --message "Subject={Data='Secret Scanning Results'},Body={Text={Data=\"$EMAIL_BODY\"}}" --profile 871866954555.developer-871866954555  
              done
            fi
          done 
          EOF
        continue-on-error: true 
      
      - name: Upload Artifact
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v2
        with:
          name: ${{ env.ARTIFACT_NAME}}
          path: ${{ env.ARTIFACT_PATH}}
    

      - name: Clean up
        run: |
          rm -rf $WORKFLOWDIR


          


      


